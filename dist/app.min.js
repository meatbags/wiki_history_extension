var CLM =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/api.js":
/*!********************!*\
  !*** ./src/api.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Call the wikipedia API. */
class API {
  constructor() {
    this.query = {
      action: '?action=query',
      request: '&prop=revisions&rvprop=ids|user|userid|flags|tags|timestamp',
      limit: '&rvlimit=max',
      format: '&format=json&formatversion=2'
    };
  }

  init(title, hostname) {
    this.title = title;
    this.hostname = hostname;
    this.endpoint = `https://${this.hostname}/w/api.php`; // build request string

    this.requestString = [this.endpoint, this.query.action, `&titles=${this.title.replace(/ /g, '%20')}`, this.query.request, this.query.limit, this.query.format].join('');
  }

  getRevisionMeta(handler, rvcontinue) {
    const req = this.requestString + (rvcontinue ? `&rvcontinue=${rvcontinue}` : '');
    const xhr = new XMLHttpRequest(); // log request

    console.log(req); // send to api

    xhr.onreadystatechange = handler;
    xhr.open('GET', req, true);
    xhr.send();
  }

}

/* harmony default export */ __webpack_exports__["default"] = (API);

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api */ "./src/api.js");
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view */ "./src/view.js");
/** Application entry point. */



class App {
  constructor() {
    this.api = new _api__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.view = new _view__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.checkStorage(); // manual refresh

    const button = document.querySelector('#refresh');

    if (button) {
      button.addEventListener('click', () => {// TODO: reset everything
      });
    }
  }

  checkStorage() {
    // check local session storage or request new data
    chrome.storage.sync.get(null, res => {
      if (res.title && res.hostname) {
        // init view
        this.view.setTitle(res.title);
        this.api.init(res.title, res.hostname); // check session for existing data

        if (res.title === localStorage.getItem('title') && res.hostname === localStorage.getItem('hostname')) {// process localstorage here
        } else {
          this.api.getRevisionMeta(evt => {
            this.onRevisionMeta(evt);
          }, false);
        }
      }
    });
  }

  onRevisionMeta(evt) {
    if (evt.currentTarget && evt.currentTarget.readyState == 4) {
      // parse data and continue
      const res = JSON.parse(evt.currentTarget.responseText);
      this.view.parseRevisionData(res).then(() => {
        // continue until complete
        if (res.continue && res.continue.rvcontinue) {
          this.api.getRevisionMeta(evt => {
            this.onRevisionMeta(evt);
          }, res.continue.rvcontinue);
        }
      });
    } else {
      console.log('Ready state:', evt.currentTarget.readyState);
    }
  }

  storeSessionData() {
    const revisions = localStorage.getItem('revisions');

    if (revisions) {// concat
    } else {// new data
      }
  }

  clearSessionData() {
    localStorage.removeItem('title');
    localStorage.removeItem('hostname');
  }

}

window.addEventListener('DOMContentLoaded', () => {
  const app = new App();
});

/***/ }),

/***/ "./src/time.js":
/*!*********************!*\
  !*** ./src/time.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/** Time utilities. */
class Time {
  constructor() {
    this.date = new Date();
  }

  getWeekStart(timestamp) {
    // get start of week as Date object
    const d = new Date(timestamp || this.date);
    const date = d.getUTCDate();
    const day = d.getUTCDay();
    d.setUTCDate(date - (day + 6) % 7);
    d.setUTCHours(0, 0, 0, 0);
    return d;
  }

  getMonthStart(timestamp) {
    // get start of month as Date object
    const d = new Date(timestamp || this.date);
    d.setUTCDate(1);
    d.setUTCHours(0, 0, 0, 0);
    return d;
  }

  getWeeks(from, to) {
    // get array of week starts (Date objects)
    const start = this.getWeekStart(from);
    const stop = this.getWeekStart(to);
    let current = new Date(start);
    const res = [start];

    while (current.getTime() < stop.getTime()) {
      current.setUTCDate(current.getUTCDate() + 7);
      res.push(new Date(current));
    }

    res.push(stop);
    return res;
  }

  getMonths(from, to) {
    // get array of month starts (Date objects)
    const start = this.getMonthStart(from);
    const stop = this.getMonthStart(to);
    let current = new Date(start);
    const res = [start];

    while (current.getTime() < stop.getTime()) {
      current.setUTCMonth(current.getUTCMonth() - 1);
      res.push(new Date(current));
    }

    res.push(stop);
    return res;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (Time);

/***/ }),

/***/ "./src/view.js":
/*!*********************!*\
  !*** ./src/view.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./time */ "./src/time.js");
/** Data visualiser. */


class View {
  constructor() {
    this.mouse = {
      x: 0,
      y: 0,
      ref: {
        x: 0,
        y: 0
      },
      active: false
    };
    this.el = {
      title: document.querySelector('#title'),
      graphWrapper: document.querySelector('#graph-wrapper'),
      graphSlider: document.querySelector('#graph-slider'),
      graph: document.querySelector('#graph'),
      togglePeriod: document.querySelector('#toggle-period')
    }; // storage

    this.dataset = [];
    this.maxVolume = 0; // add column for current week

    this.time = new _time__WEBPACK_IMPORTED_MODULE_0__["default"]();
    const monday = this.time.getWeekStart().toISOString();
    const el = this.createColumn(monday);
    this.el.graph.appendChild(el); // ui

    this.el.graph.addEventListener('mousedown', e => {
      this.onMouseDown(e);
    });
    this.el.graph.addEventListener('mousemove', e => {
      this.onMouseMove(e);
    });
    this.el.graph.addEventListener('mouseup', e => {
      this.onMouseUp(e);
    });
    this.el.graph.addEventListener('mouseleave', e => {
      this.onMouseUp(e);
    });
    this.el.togglePeriod.addEventListener('click', e => {
      this.el.togglePeriod.classList.toggle('active');
    });
  }

  parseRevisionData(data) {
    return new Promise((resolve, reject) => {
      this.addRevisions(data.query.pages[0].revisions);
      resolve();
    });
  }

  createColumn(timestamp) {
    const el = document.createElement('div');
    el.classList.add('column');
    el.dataset.timestamp = timestamp;
    el.dataset.volume = 0;
    el.style.height = '0%';
    return el;
  }

  addMissingColumns(timestamp) {
    // add missing weeks
    const lastChild = this.el.graph.lastChild;
    const weekStart = this.time.getWeekStart(timestamp);
    const a = weekStart.getTime();
    const b = new Date(lastChild.dataset.timestamp).getTime();

    if (a < b) {
      const dates = this.time.getWeeks(weekStart.toISOString(), lastChild.dataset.timestamp); // add columns

      for (let i = dates.length - 1, lim = -1; i > lim; --i) {
        const str = dates[i].toISOString(); // add element if it doesn't exist

        if (!this.el.graph.querySelector(`[data-timestamp="${str}"]`)) {
          const el = this.createColumn(str);
          this.el.graph.appendChild(el);
        }
      }
    }
  }

  incrementColumn(timestamp) {
    const el = this.el.graph.querySelector(`[data-timestamp="${timestamp}"]`);
    const val = parseInt(el.dataset.volume) + 1;
    el.dataset.volume = val;
    el.title = `${val}`;
    return val;
  }

  addRevisions(revs) {
    // store new data
    const index = this.dataset.length;
    this.dataset = this.dataset.concat(revs.map(el => {
      return {
        timestamp: el.timestamp,
        user: el.user
      };
    })); // parse new data

    for (let i = index, len = this.dataset.length; i < len; ++i) {
      // get week start
      const item = this.dataset[i];
      const str = this.time.getWeekStart(item.timestamp).toISOString(); // add missing elements

      if (!this.el.graph.querySelector(`[data-timestamp="${str}"]`)) {
        this.addMissingColumns(str);
      } // increment and check max


      this.maxVolume = Math.max(this.maxVolume, this.incrementColumn(str));
    } // normalise data


    if (this.maxVolume != 0) {
      let i = 0;
      this.el.graph.querySelectorAll('.column').forEach(el => {
        const percent = parseInt(el.dataset.volume) / this.maxVolume * 100;

        if (el.classList.contains('active')) {
          el.style.height = `${percent}%`;
        } else {
          el.classList.add('active');
          setTimeout(() => {
            el.style.height = `${percent}%`;
          }, i++ * 20);
        }
      });
    }
  }

  onMouseDown(e) {
    this.mouse.active = true; // set start positions

    this.mouse.ref.x = e.clientX;
    this.mouse.ref.y = e.clientY;
    this.scrollRef = this.el.graphSlider.scrollLeft;
    this.scrollMax = this.el.graphSlider.scrollWidth - this.el.graphSlider.clientWidth;
  }

  onMouseMove(e) {
    // calculate mouse delta and pan graph
    if (this.mouse.active) {
      this.mouse.x = e.clientX;
      this.mouse.y = e.clientY;
      const dx = this.mouse.x - this.mouse.ref.x;
      let next = this.scrollRef - dx; // limit scrolling & reset delta origin

      if (next > this.scrollMax || next < 0) {
        next = Math.max(0, Math.min(this.scrollMax, next));
        this.mouse.ref.x = this.mouse.x;
        this.scrollRef = next;
      } // set new scroll


      this.el.graphSlider.scrollLeft = next;
    }
  }

  onMouseUp(e) {
    this.mouse.active = false;
  }

  setTitle(title) {
    this.el.title.innerHTML = title;
  }

}

/* harmony default export */ __webpack_exports__["default"] = (View);

/***/ })

/******/ });
//# sourceMappingURL=app.min.js.map